name: WITH DISPATCH/INPUTS Run Playwright Tests

on:
  workflow_dispatch: # Allow manual triggering with environment selection
    inputs:
      environment:
        description: "Select the environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - int
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        shard: [1, 2, 3, 4]

    env:
      DEV_ALL_REALM_BASE_URL: ${{vars.DEV_ALL_REALM_BASE_URL}}
      INT_REALM_AS_BASE_URL: ${{vars.INT_REALM_AS_BASE_URL}}
      INT_REALM_EU_BASE_URL: ${{vars.INT_REALM_EU_BASE_URL}}
      INT_REALM_US_BASE_URL: ${{vars.INT_REALM_US_BASE_URL}}
      S3_BUCKET: ${{vars.S3_BUCKET}}
      CI_ENV: ${{vars.CI_ENV}}
      ENV: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cash: "npm"
          cash-dependency-path: "package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Install allure-commandline
        run: npm install allure-commandline

      - name: Verify allure version
        run: npx allure --version

      - name: Delete old Allure results
        run: |
          if [ -d "allure-results" ]; then
            rm -rf allure-results
          fi


      - name: Run Playwright tests
        run: npm run test:env ${{ env.ENV  }} ${{ matrix.shard }}
        continue-on-error: true

      # - name: List allure results
      #   run: ls -alh allure-results

      - name: Upload Allure results for ${{ env.ENV  }} -shard ${{ matrix.shard }}
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ env.ENV  }}-${{ matrix.shard }}
          path: allure-results

  merge_results:
    runs-on: ubuntu-latest
    needs: test

    env:
      ENV: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Allure results from all shards
        uses: actions/download-artifact@v4
        with:
          name: allure-results-${{ env.ENV  }}-1
          path: allure-results-${{ env.ENV  }}/1
        continue-on-error: true

      - name: Download Allure results from all shards
        uses: actions/download-artifact@v4
        with:
          name: allure-results-${{ env.ENV }}-2
          path: allure-results-${{ env.ENV }}/2
        continue-on-error: true

      - name: Download Allure results from all shards
        uses: actions/download-artifact@v4
        with:
          name: allure-results-${{ env.ENV  }}-3
          path: allure-results-${{ env.ENV  }}/3
        continue-on-error: true

      - name: Download Allure results from all shards
        uses: actions/download-artifact@v4
        with:
          name: allure-results-${{ env.ENV  }}-4
          path: allure-results-${{ env.ENV  }}/4
        continue-on-error: true

      - name: Install allure-commandline
        run: npm install -g allure-commandline

      - name: Verify allure version
        run: npx allure --version

      - name: Merge Allure results and generate report
        run: |
          mkdir -p allure-results/combined
          # Combine results from all shards into a single directory
          cp -r allure-results-${{ env.ENV  }}/1/* allure-results/combined/ || true
          cp -r allure-results-${{ env.ENV  }}/2/* allure-results/combined/ || true
          cp -r allure-results-${{ env.ENV  }}/3/* allure-results/combined/ || true
          cp -r allure-results-${{ env.ENV  }}/4/* allure-results/combined/ || true
          # Generate the Allure report
          npx allure generate allure-results/combined --clean -o allure-report-${{ env.ENV  }}
          # List contents of the report directory for debugging
          ls -alh allure-report-${{ env.ENV  }}

      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ env.ENV  }}
          path: allure-report-${{ env.ENV  }}

  deploy:
    runs-on: ubuntu-latest
    needs: merge_results
    if: always()
    env:
      ENV: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Ensure the full repository is checked out to work with Git
          fetch-depth: 0

      - name: Configure Git User
        run: |
          git config --global user.name "omardwwm"
          git config --global user.email "boudraa.omar@gmail.com"

      - name: Checkout gh-pages branch
        run: |
          git fetch origin gh-pages
          git checkout gh-pages || git checkout -b gh-pages
        # List the docs directory before cleaning the specific environment folder
      - name: List the docs directory before cleanup
        run: ls -alh docs || echo "docs directory not found"

        # Clean only the folder for the current environment being run
      - name: Clean up the current environment's report folder
        run: |
          if [ -d "docs/${{ env.ENV }}" ]; then
            echo "Cleaning up folder docs/${{ env.ENV }}"
            find docs/${{ env.ENV }} -mindepth 1 -exec rm -rf {} +
          else
            echo "Directory docs/${{ env.ENV }} does not exist, skipping cleanup"
          fi

      - name: Verify docs Directory after cleanup
        run: |
          echo "docs directory contents after cleanup:"
          ls -alh docs
          ls -alh docs/${{ env.ENV }} || echo "docs/${{ env.ENV }} directory not found"
              
        # Download the Allure report for the current environment
      - name: Download Allure Report
        uses: actions/download-artifact@v4
        with:
          name: allure-report-${{ env.ENV }}
          path: docs/${{ env.ENV }}/allure-report-${{ env.ENV }} 


          # List new report after download
      - name: List new report after download
        run: |
          ls -alh docs/${{ env.ENV }}

      - name: Check git status
        run: |
          echo "Current directory:"
          pwd
          echo "Contents of the directory:"
          ls -la
          git status || exit 1

      # Add and commit the changes to gh-pages
      - name: Add and Commit the new report
        run: |
          git add docs/${{ env.ENV }}/allure-report-${{ env.ENV }}
          git commit -m "Update Allure report for ${{ env.ENV }}" || echo "No changes to commit"

      # Push the changes to the gh-pages branch
      - name: Push changes to gh-pages
        run: git push origin gh-pages --force