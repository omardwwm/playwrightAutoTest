name: Run Playwright Tests

on:
  schedule:
    # - cron: "*/5 * * * *" # Every 5 MINUTES
    - cron: "0 16 * * *" # Every day at 09:00 UTC
    - cron: "0 17 * * *" # Every day at 21:00 UTC
  push:
    branches: [main]
  pull_request:
    branches:
      - "main"

jobs:

  determine_environment:
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.set_environment.outputs.env }}
    steps:
      - name: Determine environment
        id: set_environment
        run: |
         echo "Determining environment..."
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "ENV=dev" >> $GITHUB_ENV
          elif [ "${{ github.event.schedule }}" == "0 17 * * *" ]; then
            echo "ENV=int" >> $GITHUB_ENV
          else
            echo "ENV=dev" >> $GITHUB_ENV
          fi

          echo "::set-output name=env::${{ env.ENV }}"


  test:
    runs-on: ubuntu-latest
    needs: determine_environment
    if: needs.determine_environment.outputs.env == 'dev' || needs.determine_environment.outputs.env == 'int' # Conditional execution based on environment
    strategy:
      matrix:
        # environment: [${{ needs.determine_environment.outputs.env }}]
        shard: [1, 2, 3, 4]

    env:
      DEV_ALL_REALM_BASE_URL: ${{vars.DEV_ALL_REALM_BASE_URL}}
      INT_REALM_AS_BASE_URL: ${{vars.INT_REALM_AS_BASE_URL}}
      INT_REALM_EU_BASE_URL: ${{vars.INT_REALM_EU_BASE_URL}}
      INT_REALM_US_BASE_URL: ${{vars.INT_REALM_US_BASE_URL}}
      S3_BUCKET: ${{vars.S3_BUCKET}}
      CI_ENV: ${{vars.CI_ENV}}
      ENV: ${{ needs.determine_environment.outputs.env }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cash: "npm"
          cash-dependency-path: "package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Install allure-commandline
        run: npm install allure-commandline

      - name: Verify allure version
        run: npx allure --version

      - name: Delete old Allure results for environment and shard
        run: |
          if [ -d "allure-results-${{ env.ENV  }}-${{ matrix.shard }}" ]; then
            rm -rf allure-results-${{ env.ENV  }}-${{ matrix.shard }}
          fi

      - name: Run Playwright tests
        run: npm run test:env ${{ env.ENV  }} ${{ matrix.shard }}
        continue-on-error: true

      # - name: List allure results
      #   run: ls -alh allure-results

      - name: Upload Allure results for ${{ env.ENV  }} -shard ${{ matrix.shard }}
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ env.ENV  }}-${{ matrix.shard }}
          path: allure-results


  merge_results:
    runs-on: ubuntu-latest
    needs: test
    # strategy:
    #   matrix:
    #     environment: ${{ needs.determine_environment.outputs.env }}

    env:
      ENV: ${{ needs.determine_environment.outputs.env }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Allure results from shards
        run: |
          mkdir -p allure-results/combined
          for shard in 1 2 3 4; do
            cp -r allure-results-${{ env.ENV }}-shard-${shard}/* allure-results/combined/ || true
          done

      - name: Install allure-commandline
        run: npm install -g allure-commandline

      - name: Verify allure version
        run: npx allure --version

      - name: Merge Allure results and generate report
        run: |
          npx allure generate allure-results/combined --clean -o allure-report-${{ env.ENV  }}
          ls -alh allure-report-${{ env.ENV  }}

      - name: Upload Mrged Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ env.ENV  }}
          path: allure-report-${{ env.ENV  }}

      # Conditional execution based on environment
    if: needs.test.result == 'success'

  deploy:
    runs-on: ubuntu-latest
    needs: merge_results
    if: always()
    # strategy:
    #   matrix:
    #     environment: ${{ needs.determine_environment.outputs.env }}
    #   max-parallel: 1 # Avoid parallel deployment to prevent conflicts

    env:
      ENV: ${{ needs.determine_environment.outputs.env }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Git User
        run: |
          git config --global user.name "testgit"
          git config --global user.email "git@mail.com"

      - name: Ensure environment directory exists
        run: mkdir -p docs/allure-report-${{ env.ENV }}

      - name: Remove old report files
        run: rm -rf docs/allure-report-${{ env.ENV}}/*

      - name: Download Allure Report
        uses: actions/download-artifact@v4
        with:
          name: allure-report-${{ env.ENV }}
          path: docs/allure-report-${{ env.ENV }}

      - name: Commit and Deploy Allure Report to GitHub Pages
        run: |
          git add docs/
          git commit -m "Update Allure report for ${{ env.ENV }}"
          git push origin gh-pages --force
