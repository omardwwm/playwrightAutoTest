name: CI PUSH & SCHEDULED Run Playwright Tests

on:
  schedule:
    - cron: "17 19 * * *"
    - cron: "25 6 * * *"

  push:
    branches: [main, develop]
  pull_request:
    branches:
      - "main"

jobs:
  determine-env:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}

    steps:
      - name: Debug event info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Event ref: ${{ github.ref }}"
          echo "Triggered by schedule or push event?"

      - name: Determine environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "schedule" ]; then
              if [ "${{ github.event.schedule }}" == "17 19 * * *" ]; then
                ENVIRONMENT="int"
              elif [ "${{ github.event.schedule }}" == "25 6 * * *" ]; then
                ENVIRONMENT="dev"
              fi
            elif [ "${{ github.event_name }}" == "push" ]; then
              if [ "${{ github.ref }}" == "refs/heads/main" ]; then
                ENVIRONMENT="dev"
              elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
                ENVIRONMENT="dev"
              fi
            fi

            echo "ENVIRONMENT=$ENVIRONMENT"
            # echo "::set-output name=environment::$ENVIRONMENT"  # Set the environment as output 
            echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT  # Set the environment as output

  test:
    runs-on: ubuntu-latest
    needs: determine-env
    strategy:
      matrix:
        # environment:
        #   # - int
        #   - dev
        shard: [1, 2, 3, 4]

    env:
      DEV_ALL_REALM_BASE_URL: ${{vars.DEV_ALL_REALM_BASE_URL}}
      INT_REALM_AS_BASE_URL: ${{vars.INT_REALM_AS_BASE_URL}}
      INT_REALM_EU_BASE_URL: ${{vars.INT_REALM_EU_BASE_URL}}
      INT_REALM_US_BASE_URL: ${{vars.INT_REALM_US_BASE_URL}}
      S3_BUCKET: ${{vars.S3_BUCKET}}
      CI_ENV: ${{vars.CI_ENV}}
      ENVIRONMENT: ${{ needs.determine-env.outputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout gh-pages branch
        run: |
          git fetch origin gh-pages
          git checkout gh-pages
  
      - name: Copy Allure History
        run: |
          if [ -d "docs/${{ env.ENVIRONMENT }}/allure-report-${{ env.ENVIRONMENT }}/history" ]; then
            mkdir -p allure-results/history
            cp -R docs/${{ env.ENVIRONMENT }}/allure-report-${{ env.ENVIRONMENT }}/history/* allure-results/history/
          else
            echo "No history found from gh-pages."
          fi
          
        continue-on-error: true      
      
      - name: Checkout main branch
        run: git checkout develop

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cash: "npm"
          cash-dependency-path: "package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Install allure-commandline
        run: npm install allure-commandline

      - name: Verify allure version
        run: npx allure --version

      - name: Delete old Allure results
        run: |
          if [ -d "allure-results" ]; then
            rm -rf allure-results
          fi

      - name: Run Playwright tests
        run: npm run test:env ${{ env.ENVIRONMENT }} ${{ matrix.shard }}
        continue-on-error: true

      - name: Upload Allure results for ${{ env.ENVIRONMENT }} -shard ${{ matrix.shard }}
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ env.ENVIRONMENT }}-${{ matrix.shard }}
          path: allure-results

    outputs:
      test-environment: ${{ env.ENVIRONMENT }}

  merge_results:
    runs-on: ubuntu-latest
    needs: test

    env:
      ENVIRONMENT: ${{ needs.test.outputs.test-environment }}

    # strategy:
    #   matrix:
    #     environment:
    #       # - int
    #       - dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Allure results from all shards
        uses: actions/download-artifact@v4
        with:
          name: allure-results-${{ env.ENVIRONMENT }}-1
          path: allure-results-${{ env.ENVIRONMENT }}/1
        continue-on-error: true

      - name: Download Allure results from all shards
        uses: actions/download-artifact@v4
        with:
          name: allure-results-${{ env.ENVIRONMENT }}-2
          path: allure-results-${{ env.ENVIRONMENT }}/2
        continue-on-error: true

      - name: Download Allure results from all shards
        uses: actions/download-artifact@v4
        with:
          name: allure-results-${{ env.ENVIRONMENT }}-3
          path: allure-results-${{ env.ENVIRONMENT }}/3
        continue-on-error: true

      - name: Download Allure results from all shards
        uses: actions/download-artifact@v4
        with:
          name: allure-results-${{ env.ENVIRONMENT }}-4
          path: allure-results-${{ env.ENVIRONMENT }}/4
        continue-on-error: true

      - name: Install allure-commandline
        run: npm install -g allure-commandline

      - name: Verify allure version
        run: npx allure --version

      - name: Merge Allure results and generate report
        run: |
          mkdir -p allure-results/combined
          # Combine results from all shards into a single directory
          cp -r allure-results-${{ env.ENVIRONMENT }}/1/* allure-results/combined/ || true
          cp -r allure-results-${{ env.ENVIRONMENT }}/2/* allure-results/combined/ || true
          cp -r allure-results-${{ env.ENVIRONMENT }}/3/* allure-results/combined/ || true
          cp -r allure-results-${{ env.ENVIRONMENT }}/4/* allure-results/combined/ || true
          # Include the previous history
          cp -r allure-results/history allure-results/combined/history || true
          # Generate the Allure report
          npx allure generate allure-results/combined --clean -o allure-report-${{ env.ENVIRONMENT }}
          # List contents of the report directory for debugging
          ls -alh allure-report-${{ env.ENVIRONMENT }}

      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report-${{ env.ENVIRONMENT }}
          path: allure-report-${{ env.ENVIRONMENT }}

    outputs:
      merged-environment: ${{ env.ENVIRONMENT }}

  deploy:
    runs-on: ubuntu-latest
    needs: merge_results
    env:
      ENVIRONMENT: ${{ needs.merge_results.outputs.merged-environment }}

    # strategy:
    #   matrix:
    #     environment:
    #       # - int
    #       - dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Ensure the full repository is checked out to work with Git
          fetch-depth: 0

      - name: Configure Git User
        run: |
          git config --global user.name "omardwwm"
          git config --global user.email "boudraa.omar@gmail.com"

      - name: Checkout gh-pages branch
        run: |
          git fetch origin gh-pages
          git checkout gh-pages || git checkout -b gh-pages

      # List the docs directory before cleaning the specific environment folder
      - name: List the docs directory before cleanup
        run: ls -alh docs || echo "docs directory not found"

      # Clean only the folder for the current environment being run
      - name: Clean up the current environment's report folder
        run: |
          if [ -d "docs/${{ env.ENVIRONMENT }}" ]; then
            echo "Cleaning up folder docs/${{ env.ENVIRONMENT }}"
            find docs/${{ env.ENVIRONMENT }} -mindepth 1 -exec rm -rf {} +
          else
            echo "Directory docs/${{ env.ENVIRONMENT }} does not exist, skipping cleanup"
          fi

      - name: Verify docs Directory after cleanup
        run: |
          echo "docs directory contents after cleanup:"
          ls -alh docs
          ls -alh docs/${{ env.ENVIRONMENT }} || echo "docs/${{ env.ENVIRONMENT }} directory not found"

      # Download the Allure report for the current environment
      - name: Download Allure Report
        uses: actions/download-artifact@v4
        with:
          name: allure-report-${{ env.ENVIRONMENT }}
          path: docs/${{ env.ENVIRONMENT }}/allure-report-${{ env.ENVIRONMENT }}

      # List new report after download
      - name: List new report after download
        run: |
          ls -alh docs/${{ env.ENVIRONMENT }}

      - name: Check git status
        run: |
          echo "Current directory:"
          pwd
          echo "Contents of the directory:"
          ls -la
          git status || exit 1

      # Add and commit the changes to gh-pages
      - name: Add and Commit the new report
        run: |
          git add docs/${{ env.ENVIRONMENT }}/allure-report-${{ env.ENVIRONMENT }}
          git commit -m "Update Allure report for ${{ env.ENVIRONMENT }}" || echo "No changes to commit"

      # Push the changes to the gh-pages branch
      - name: Push changes to gh-pages
        run: git push origin gh-pages --force
